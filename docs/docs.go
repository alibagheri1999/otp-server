// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@otpserver.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/send-otp": {
            "post": {
                "description": "Send a one-time password (OTP) to the provided phone number for authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Send OTP",
                "parameters": [
                    {
                        "description": "Send OTP request with phone number",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SendOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SendOTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid phone number format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many OTP requests",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/verify-otp": {
            "post": {
                "description": "Verify the one-time password (OTP) sent to the user's phone number and return JWT authentication tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "Verify OTP request with phone number and OTP code",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful - returns access token, refresh token, and user info",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid OTP or expired OTP",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many verification attempts",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during token generation",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the profile information of the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get User Profile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing JWT token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the profile information of the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "Profile update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing JWT token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get users with optional search and pagination in a single endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Users Unified",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query (optional)",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination limit (default: 10, max: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UnifiedUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing JWT token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthResponse": {
            "description": "Successful authentication response with token and user info",
            "type": "object",
            "properties": {
                "token": {
                    "description": "@Description JWT token for API authentication\n@Example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "description": "@Description User information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AuthUserResponse"
                        }
                    ]
                }
            }
        },
        "dto.AuthUserResponse": {
            "description": "User profile information for authentication",
            "type": "object",
            "properties": {
                "id": {
                    "description": "@Description Unique user identifier\n@Example 123",
                    "type": "integer",
                    "example": 123
                },
                "name": {
                    "description": "@Description User's full name\n@Example John Doe",
                    "type": "string",
                    "example": "John Doe"
                },
                "phone_number": {
                    "description": "@Description User's phone number\n@Example +1234567890",
                    "type": "string",
                    "example": "+1234567890"
                },
                "role": {
                    "description": "@Description User's role in the system\n@Example user",
                    "type": "string",
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "example": "user"
                }
            }
        },
        "dto.ErrorResponse": {
            "description": "Standard error response format",
            "type": "object",
            "properties": {
                "error": {
                    "description": "@Description Error type or category\n@Example validation_error",
                    "type": "string",
                    "example": "validation_error"
                },
                "message": {
                    "description": "@Description Detailed error message\n@Example Phone number format is invalid",
                    "type": "string",
                    "example": "Phone number format is invalid"
                }
            }
        },
        "dto.SendOTPRequest": {
            "description": "Request to send OTP to a phone number",
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "phone_number": {
                    "description": "@Description Phone number in international format (e.g., +1234567890)\n@Example +1234567890\n@Required",
                    "type": "string",
                    "example": "+1234567890"
                }
            }
        },
        "dto.SendOTPResponse": {
            "description": "Response when OTP is sent successfully",
            "type": "object",
            "properties": {
                "message": {
                    "description": "@Description Success message\n@Example OTP sent successfully",
                    "type": "string",
                    "example": "OTP sent successfully"
                },
                "phone_number": {
                    "description": "@Description Phone number where OTP was sent\n@Example +1234567890",
                    "type": "string",
                    "example": "+1234567890"
                },
                "timestamp": {
                    "description": "@Description Timestamp when OTP was sent\n@Example 2024-01-15T10:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                }
            }
        },
        "dto.UnifiedUsersResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "object",
                    "properties": {
                        "limit": {
                            "type": "integer"
                        },
                        "offset": {
                            "type": "integer"
                        }
                    }
                },
                "query": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponse"
                    }
                }
            }
        },
        "dto.UpdateProfileRequest": {
            "description": "Request to update user profile information",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "@Description User's full name\n@Example John Doe\n@Required",
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "dto.UserResponse": {
            "description": "User information",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "@Description Account creation timestamp\n@Example 2024-01-01T00:00:00Z",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "id": {
                    "description": "@Description Unique user identifier\n@Example 123",
                    "type": "integer",
                    "example": 123
                },
                "is_active": {
                    "description": "@Description Whether the user account is active\n@Example true",
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "description": "@Description User's full name\n@Example John Doe",
                    "type": "string",
                    "example": "John Doe"
                },
                "phone_number": {
                    "description": "@Description User's phone number\n@Example +1234567890",
                    "type": "string",
                    "example": "+1234567890"
                },
                "role": {
                    "description": "@Description User's role in the system\n@Example user",
                    "type": "string",
                    "example": "user"
                },
                "updated_at": {
                    "description": "@Description Last profile update timestamp\n@Example 2024-01-01T00:00:00Z",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "dto.VerifyOTPRequest": {
            "description": "Request to verify OTP and authenticate user",
            "type": "object",
            "required": [
                "name",
                "otp",
                "phone_number"
            ],
            "properties": {
                "name": {
                    "description": "@Description User's name (required for new user registration)\n@Example John Doe\n@Required",
                    "type": "string",
                    "example": "John Doe"
                },
                "otp": {
                    "description": "@Description One-time password (6 digits)\n@Example 123456\n@Required",
                    "type": "string",
                    "example": "123456"
                },
                "phone_number": {
                    "description": "@Description Phone number in international format\n@Example +1234567890\n@Required",
                    "type": "string",
                    "example": "+1234567890"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "OTP Server API",
	Description:      "A secure OTP-based authentication service with user management",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
